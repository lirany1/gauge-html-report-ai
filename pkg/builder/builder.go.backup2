package builder

import (
	"fmt"
	"html/template"
	"os"
	"path/filepath"
	"time"

	"github.com/getgauge/gauge-proto/go/gauge_messages"
	"github.com/your-org/gauge-html-report-enhanced/pkg/logger"
)

// ReportBuilder handles building the HTML report
type ReportBuilder struct {
	reportsDir string
	themePath  string
}

// NewReportBuilder creates a new report builder
func NewReportBuilder(reportsDir, themePath string) *ReportBuilder {
	return &ReportBuilder{
		reportsDir: reportsDir,
		themePath:  themePath,
	}
}

// BuildReport generates the HTML report from suite results
func (rb *ReportBuilder) BuildReport(suiteResult *gauge_messages.ProtoSuiteResult) error {
	// Create reports directory
	reportDir := filepath.Join(rb.reportsDir, "html-report")
	if err := os.MkdirAll(reportDir, 0755); err != nil {
		return fmt.Errorf("failed to create report directory: %w", err)
	}

	// Copy theme assets
	if err := rb.copyAssets(reportDir); err != nil {
		logger.Warnf("Failed to copy assets: %v", err)
	}

	// Generate index.html
	if err := rb.generateIndexHTML(reportDir, suiteResult); err != nil {
		return fmt.Errorf("failed to generate index.html: %w", err)
	}

	logger.Infof("Successfully generated html-report to => %s/index.html", reportDir)
	return nil
}

// generateIndexHTML creates the main index.html file
func (rb *ReportBuilder) generateIndexHTML(reportDir string, suiteResult *gauge_messages.ProtoSuiteResult) error {
	// Calculate statistics
	totalSpecs := len(suiteResult.GetSpecResults())
	passedSpecs := 0
	failedSpecs := 0
	skippedSpecs := 0
	totalScenarios := 0

	for _, spec := range suiteResult.GetSpecResults() {
		if spec.GetFailed() {
			failedSpecs++
		} else if spec.GetSkipped() {
			skippedSpecs++
		} else {
			passedSpecs++
		}
		totalScenarios += len(spec.GetProtoSpec().GetItems())
	}

	successRate := 0.0
	if totalSpecs > 0 {
		successRate = float64(passedSpecs) / float64(totalSpecs) * 100
	}

	// Prepare template data
	data := map[string]interface{}{
		"ProjectName":       suiteResult.GetProjectName(),
		"Environment":       suiteResult.GetEnvironment(),
		"PassedSpecsCount":  passedSpecs,
		"FailedSpecsCount":  failedSpecs,
		"SkippedSpecsCount": skippedSpecs,
		"TotalSpecsCount":   totalSpecs,
		"TotalScenarios":    totalScenarios,
		"ExecutionTime":     formatDuration(time.Duration(suiteResult.GetExecutionTime()) * time.Millisecond),
		"SuccessRate":       fmt.Sprintf("%.1f", successRate),
		"Timestamp":         time.Now().Format("January 2, 2006 at 3:04 PM"),
		"SpecResults":       suiteResult.GetSpecResults(),
	}

	// Create HTML from template
	tmpl := rb.getTemplate()

	indexPath := filepath.Join(reportDir, "index.html")
	f, err := os.Create(indexPath)
	if err != nil {
		return err
	}
	defer f.Close()

	return tmpl.Execute(f, data)
}

// getTemplate returns the HTML template
func (rb *ReportBuilder) getTemplate() *template.Template {
	// Define template functions
	funcMap := template.FuncMap{
		"getStatus": func(spec *gauge_messages.ProtoSpecResult) string {
			if spec.GetFailed() {
				return "failed"
			} else if spec.GetSkipped() {
				return "skipped"
			}
			return "passed"
		},
		"getSpecHeading": func(spec *gauge_messages.ProtoSpecResult) string {
			if spec.GetProtoSpec() != nil {
				return spec.GetProtoSpec().GetSpecHeading()
			}
			return "Unknown Specification"
		},
		"getScenarioCount": func(spec *gauge_messages.ProtoSpecResult) int {
			if spec.GetProtoSpec() != nil {
				return len(spec.GetProtoSpec().GetItems())
			}
			return 0
		},
		"getTags": func(spec *gauge_messages.ProtoSpecResult) []string {
			if spec.GetProtoSpec() != nil && spec.GetProtoSpec().GetTags() != nil {
				return spec.GetProtoSpec().GetTags()
			}
			return []string{}
		},
		"formatDuration": func(ms int64) string {
			return formatDuration(time.Duration(ms) * time.Millisecond)
		},
	}

	tmplStr := rb.getTemplateString()
	return template.Must(template.New("index").Funcs(funcMap).Parse(tmplStr))
}

// copyAssets copies CSS, JS, and other assets to the report directory
func (rb *ReportBuilder) copyAssets(reportDir string) error {
	// Create asset directories
	dirs := []string{"css", "js", "images"}
	for _, dir := range dirs {
		if err := os.MkdirAll(filepath.Join(reportDir, dir), 0755); err != nil {
			return err
		}
	}

	// Copy main CSS
	if err := rb.copyFile("main.css", filepath.Join(reportDir, "css", "main.css")); err != nil {
		logger.Warnf("Could not copy main.css: %v", err)
	}

	// Copy main JS
	if err := rb.copyFile("main.js", filepath.Join(reportDir, "js", "main.js")); err != nil {
		logger.Warnf("Could not copy main.js: %v", err)
	}

	return nil
}

// copyFile copies a file from theme to destination
func (rb *ReportBuilder) copyFile(filename, dest string) error {
	// For now, just create empty files - in full implementation,
	// we would copy from the theme directory
	return os.WriteFile(dest, []byte("/* Asset file */"), 0644)
}

// formatDuration formats a duration to a readable string
func formatDuration(d time.Duration) string {
	if d < time.Second {
		return fmt.Sprintf("%dms", d.Milliseconds())
	} else if d < time.Minute {
		return fmt.Sprintf("%.1fs", d.Seconds())
	} else {
		minutes := int(d.Minutes())
		seconds := int(d.Seconds()) % 60
		return fmt.Sprintf("%dm %ds", minutes, seconds)
	}
}

// getTemplateString returns the Allure-style HTML template
func (rb *ReportBuilder) getTemplateString() string {
	return `<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{{.ProjectName}} - Test Report</title>
    <script src="https://cdn.jsdelivr.net/npm/chart.js@4.4.0/dist/chart.umd.min.js"></script>
    <style>
        * { margin: 0; padding: 0; box-sizing: border-box; }
        :root {
            --color-primary: #5C7CFA;
            --color-success: #37B24D;
            --color-danger: #F03E3E;
            --color-warning: #FD7E14;
            --color-bg: #F8F9FA;
            --color-sidebar: #2C3E50;
            --color-sidebar-hover: #34495E;
            --color-surface: #FFFFFF;
            --color-text: #212529;
            --color-text-secondary: #6C757D;
            --color-border: #DEE2E6;
        }
        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            background: var(--color-bg);
            color: var(--color-text);
            line-height: 1.6;
            display: flex;
            min-height: 100vh;
        }
        
        /* Sidebar Navigation */
        .sidebar {
            width: 250px;
            background: var(--color-sidebar);
            color: white;
            position: fixed;
            height: 100vh;
            overflow-y: auto;
            z-index: 1000;
        }
        .sidebar__header {
            padding: 24px 20px;
            border-bottom: 1px solid rgba(255,255,255,0.1);
        }
        .sidebar__title {
            font-size: 20px;
            font-weight: 700;
            margin-bottom: 4px;
        }
        .sidebar__subtitle {
            font-size: 12px;
            color: rgba(255,255,255,0.7);
        }
        .sidebar__nav {
            padding: 16px 0;
        }
        .nav-item {
            padding: 12px 20px;
            cursor: pointer;
            transition: background 0.2s;
            display: flex;
            align-items: center;
            gap: 12px;
            border-left: 3px solid transparent;
        }
        .nav-item:hover {
            background: var(--color-sidebar-hover);
        }
        .nav-item.active {
            background: var(--color-sidebar-hover);
            border-left-color: var(--color-primary);
        }
        .nav-item__icon {
            font-size: 18px;
            width: 24px;
        }
        .nav-item__text {
            font-size: 14px;
            font-weight: 500;
        }
        
        /* Main Content */
        .main {
            margin-left: 250px;
            flex: 1;
            padding: 32px;
        }
        
        /* Header Stats */
        .stats-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 20px;
            margin-bottom: 32px;
        }
        .stat-card {
            background: var(--color-surface);
            border-radius: 8px;
            padding: 20px;
            box-shadow: 0 1px 3px rgba(0,0,0,0.1);
            border-left: 4px solid var(--color-border);
            transition: transform 0.2s, box-shadow 0.2s;
        }
        .stat-card:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 8px rgba(0,0,0,0.15);
        }
        .stat-card--success { border-left-color: var(--color-success); }
        .stat-card--danger { border-left-color: var(--color-danger); }
        .stat-card--warning { border-left-color: var(--color-warning); }
        .stat-card--primary { border-left-color: var(--color-primary); }
        .stat-card__value {
            font-size: 32px;
            font-weight: 700;
            margin-bottom: 4px;
        }
        .stat-card__label {
            font-size: 13px;
            color: var(--color-text-secondary);
            text-transform: uppercase;
            letter-spacing: 0.5px;
        }
        
        /* Tabs */
        .tabs {
            background: var(--color-surface);
            border-radius: 8px;
            margin-bottom: 24px;
            box-shadow: 0 1px 3px rgba(0,0,0,0.1);
        }
        .tabs__nav {
            display: flex;
            border-bottom: 1px solid var(--color-border);
        }
        .tab {
            padding: 16px 24px;
            cursor: pointer;
            border-bottom: 3px solid transparent;
            transition: all 0.2s;
            font-weight: 500;
            color: var(--color-text-secondary);
        }
        .tab:hover {
            background: var(--color-bg);
            color: var(--color-text);
        }
        .tab.active {
            color: var(--color-primary);
            border-bottom-color: var(--color-primary);
        }
        .tab__content {
            padding: 24px;
            display: none;
        }
        .tab__content.active {
            display: block;
        }
        
        /* Charts Section */
        .charts-grid {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 24px;
            margin-bottom: 32px;
        }
        .chart-card {
            background: var(--color-surface);
            border-radius: 8px;
            padding: 24px;
            box-shadow: 0 1px 3px rgba(0,0,0,0.1);
        }
        .chart-card__title {
            font-size: 16px;
            font-weight: 600;
            margin-bottom: 16px;
            color: var(--color-text);
        }
        
        /* Test List */
        .test-list {
            background: var(--color-surface);
            border-radius: 8px;
            overflow: hidden;
            box-shadow: 0 1px 3px rgba(0,0,0,0.1);
        }
        .test-item {
            padding: 20px 24px;
            border-bottom: 1px solid var(--color-border);
            transition: background 0.2s;
            cursor: pointer;
        }
        .test-item:hover {
            background: var(--color-bg);
        }
        .test-item:last-child {
            border-bottom: none;
        }
        .test-item__header {
            display: flex;
            align-items: center;
            gap: 12px;
            margin-bottom: 8px;
        }
        .test-item__status {
            width: 12px;
            height: 12px;
            border-radius: 50%;
        }
        .test-item__status--passed { background: var(--color-success); }
        .test-item__status--failed { background: var(--color-danger); }
        .test-item__status--skipped { background: var(--color-warning); }
        .test-item__title {
            font-size: 16px;
            font-weight: 600;
            flex: 1;
        }
        .test-item__duration {
            font-size: 13px;
            color: var(--color-text-secondary);
            display: flex;
            align-items: center;
            gap: 4px;
        }
        .test-item__meta {
            display: flex;
            gap: 16px;
            font-size: 13px;
            color: var(--color-text-secondary);
            margin-left: 24px;
        }
        .test-item__scenarios {
            display: flex;
            align-items: center;
            gap: 4px;
        }
        
        /* Tags */
        .tags {
            display: flex;
            flex-wrap: wrap;
            gap: 8px;
            margin-left: 24px;
            margin-top: 8px;
        }
        .tag {
            display: inline-block;
            background: var(--color-bg);
            color: var(--color-text-secondary);
            padding: 4px 12px;
            border-radius: 4px;
            font-size: 12px;
            font-weight: 500;
        }
        
        /* Timeline */
        .timeline {
            position: relative;
            padding-left: 40px;
        }
        .timeline::before {
            content: '';
            position: absolute;
            left: 12px;
            top: 0;
            bottom: 0;
            width: 2px;
            background: var(--color-border);
        }
        .timeline-item {
            position: relative;
            padding-bottom: 32px;
        }
        .timeline-item__dot {
            position: absolute;
            left: -34px;
            width: 24px;
            height: 24px;
            border-radius: 50%;
            border: 3px solid var(--color-surface);
            box-shadow: 0 0 0 2px var(--color-border);
        }
        .timeline-item__dot--success { background: var(--color-success); }
        .timeline-item__dot--danger { background: var(--color-danger); }
        .timeline-item__content {
            background: var(--color-surface);
            padding: 16px;
            border-radius: 8px;
            box-shadow: 0 1px 3px rgba(0,0,0,0.1);
        }
        
        /* Progress Bar */
        .progress {
            height: 8px;
            background: var(--color-border);
            border-radius: 4px;
            overflow: hidden;
            margin: 16px 0;
        }
        .progress__bar {
            height: 100%;
            background: var(--color-success);
            transition: width 0.5s ease;
        }
        
        /* Badge */
        .badge {
            display: inline-block;
            padding: 4px 10px;
            border-radius: 4px;
            font-size: 12px;
            font-weight: 600;
            text-transform: uppercase;
        }
        .badge--success { background: #D3F9D8; color: #2B8A3E; }
        .badge--danger { background: #FFE3E3; color: #C92A2A; }
        .badge--warning { background: #FFE8CC; color: #D9480F; }
        
        /* Responsive */
        @media (max-width: 768px) {
            .sidebar {
                transform: translateX(-100%);
                transition: transform 0.3s;
            }
            .sidebar.open {
                transform: translateX(0);
            }
            .main {
                margin-left: 0;
            }
            .charts-grid {
                grid-template-columns: 1fr;
            }
        }
    </style>
</head>
<body>
    <!-- Sidebar Navigation -->
    <aside class="sidebar">
        <div class="sidebar__header">
            <div class="sidebar__title">Test Report</div>
            <div class="sidebar__subtitle">{{.ProjectName}}</div>
        </div>
        <nav class="sidebar__nav">
            <div class="nav-item active" onclick="switchTab('overview')">
                <span class="nav-item__icon">📊</span>
                <span class="nav-item__text">Overview</span>
            </div>
            <div class="nav-item" onclick="switchTab('suites')">
                <span class="nav-item__icon">📋</span>
                <span class="nav-item__text">Test Suites</span>
            </div>
            <div class="nav-item" onclick="switchTab('graphs')">
                <span class="nav-item__icon">📈</span>
                <span class="nav-item__text">Graphs</span>
            </div>
            <div class="nav-item" onclick="switchTab('timeline')">
                <span class="nav-item__icon">⏱️</span>
                <span class="nav-item__text">Timeline</span>
            </div>
        </nav>
    </aside>

    <!-- Main Content -->
    <main class="main">
        <!-- Stats Grid -->
        <div class="stats-grid">
            <div class="stat-card stat-card--success">
                <div class="stat-card__value">{{.Summary.Passed}}</div>
                <div class="stat-card__label">Passed</div>
            </div>
            <div class="stat-card stat-card--danger">
                <div class="stat-card__value">{{.Summary.Failed}}</div>
                <div class="stat-card__label">Failed</div>
            </div>
            <div class="stat-card stat-card--warning">
                <div class="stat-card__value">{{.Summary.Skipped}}</div>
                <div class="stat-card__label">Skipped</div>
            </div>
            <div class="stat-card stat-card--primary">
                <div class="stat-card__value">{{.Summary.Duration}}</div>
                <div class="stat-card__label">Duration</div>
            </div>
        </div>

        <!-- Tabs -->
        <div class="tabs">
            <div class="tabs__nav">
                <div class="tab active" data-tab="overview">Overview</div>
                <div class="tab" data-tab="suites">Test Suites</div>
                <div class="tab" data-tab="graphs">Graphs</div>
                <div class="tab" data-tab="timeline">Timeline</div>
            </div>

            <!-- Overview Tab -->
            <div id="overview" class="tab__content active">
                <div class="charts-grid">
                    <div class="chart-card">
                        <h3 class="chart-card__title">Test Results Distribution</h3>
                        <canvas id="statusChart"></canvas>
                    </div>
                    <div class="chart-card">
                        <h3 class="chart-card__title">Success Rate</h3>
                        <div style="text-align: center; padding: 40px 0;">
                            <div style="font-size: 72px; font-weight: 700; color: var(--color-success);">{{.Summary.SuccessRate}}%</div>
                            <div style="font-size: 14px; color: var(--color-text-secondary); margin-top: 8px;">Overall Success Rate</div>
                        </div>
                        <div class="progress">
                            <div class="progress__bar" style="width: {{.Summary.SuccessRate}}%;"></div>
                        </div>
                    </div>
                </div>
                
                <div style="background: var(--color-surface); border-radius: 8px; padding: 24px; box-shadow: 0 1px 3px rgba(0,0,0,0.1);">
                    <h3 style="font-size: 16px; font-weight: 600; margin-bottom: 16px;">Execution Summary</h3>
                    <div style="display: grid; grid-template-columns: repeat(2, 1fr); gap: 16px; font-size: 14px;">
                        <div>
                            <span style="color: var(--color-text-secondary);">Total Specifications:</span>
                            <strong style="float: right;">{{.Summary.Total}}</strong>
                        </div>
                        <div>
                            <span style="color: var(--color-text-secondary);">Execution Time:</span>
                            <strong style="float: right;">{{.Summary.Duration}}</strong>
                        </div>
                        <div>
                            <span style="color: var(--color-text-secondary);">Timestamp:</span>
                            <strong style="float: right;">{{.Timestamp}}</strong>
                        </div>
                        <div>
                            <span style="color: var(--color-text-secondary);">Status:</span>
                            <strong style="float: right;">{{if eq .Summary.Failed 0}}<span class="badge badge--success">Passed</span>{{else}}<span class="badge badge--danger">Failed</span>{{end}}</strong>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Test Suites Tab -->
            <div id="suites" class="tab__content">
                <div class="test-list">
                    {{range .Specs}}
                    <div class="test-item">
                        <div class="test-item__header">
                            <div class="test-item__status test-item__status--{{.Status}}"></div>
                            <div class="test-item__title">{{.Name}}</div>
                            <div class="test-item__duration">⏱️ {{.Duration}}</div>
                        </div>
                        <div class="test-item__meta">
                            <span class="test-item__scenarios">📊 {{.ScenarioCount}} scenarios</span>
                            <span>{{if eq .Status "passed"}}✅ All passed{{else if eq .Status "failed"}}❌ Contains failures{{else}}⚠️ Skipped{{end}}</span>
                        </div>
                        {{if .Tags}}
                        <div class="tags">
                            {{range .Tags}}<span class="tag">🏷️ {{.}}</span>{{end}}
                        </div>
                        {{end}}
                    </div>
                    {{end}}
                </div>
            </div>

            <!-- Graphs Tab -->
            <div id="graphs" class="tab__content">
                <div class="charts-grid">
                    <div class="chart-card">
                        <h3 class="chart-card__title">Status Distribution</h3>
                        <canvas id="pieChart"></canvas>
                    </div>
                    <div class="chart-card">
                        <h3 class="chart-card__title">Test Results</h3>
                        <canvas id="barChart"></canvas>
                    </div>
                </div>
            </div>

            <!-- Timeline Tab -->
            <div id="timeline" class="tab__content">
                <div class="timeline">
                    {{range .Specs}}
                    <div class="timeline-item">
                        <div class="timeline-item__dot timeline-item__dot--{{if eq .Status "passed"}}success{{else}}danger{{end}}"></div>
                        <div class="timeline-item__content">
                            <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 8px;">
                                <strong style="font-size: 16px;">{{.Name}}</strong>
                                <span class="badge badge--{{.Status}}">{{.Status}}</span>
                            </div>
                            <div style="font-size: 13px; color: var(--color-text-secondary);">
                                Duration: {{.Duration}} • Scenarios: {{.ScenarioCount}}
                            </div>
                            {{if .Tags}}
                            <div class="tags" style="margin-left: 0; margin-top: 12px;">
                                {{range .Tags}}<span class="tag">{{.}}</span>{{end}}
                            </div>
                            {{end}}
                        </div>
                    </div>
                    {{end}}
                </div>
            </div>
        </div>
    </main>

    <script>
        // Tab Switching
        function switchTab(tabName) {
            // Update nav items
            document.querySelectorAll('.nav-item').forEach(item => item.classList.remove('active'));
            event.currentTarget.classList.add('active');
            
            // Update tabs
            document.querySelectorAll('.tab').forEach(tab => tab.classList.remove('active'));
            document.querySelector(`.tab[data-tab="${tabName}"]`).classList.add('active');
            
            // Update content
            document.querySelectorAll('.tab__content').forEach(content => content.classList.remove('active'));
            document.getElementById(tabName).classList.add('active');
        }

        // Tab click handlers
        document.querySelectorAll('.tab').forEach(tab => {
            tab.addEventListener('click', function() {
                const tabName = this.dataset.tab;
                
                // Update tabs
                document.querySelectorAll('.tab').forEach(t => t.classList.remove('active'));
                this.classList.add('active');
                
                // Update nav items
                document.querySelectorAll('.nav-item').forEach(item => item.classList.remove('active'));
                document.querySelectorAll('.nav-item')[Array.from(document.querySelectorAll('.tab')).indexOf(this)].classList.add('active');
                
                // Update content
                document.querySelectorAll('.tab__content').forEach(content => content.classList.remove('active'));
                document.getElementById(tabName).classList.add('active');
            });
        });

        // Chart Data
        const chartData = {
            passed: {{.Summary.Passed}},
            failed: {{.Summary.Failed}},
            skipped: {{.Summary.Skipped}}
        };
        const total = chartData.passed + chartData.failed + chartData.skipped;

        // Status Doughnut Chart
        const statusCtx = document.getElementById('statusChart').getContext('2d');
        new Chart(statusCtx, {
            type: 'doughnut',
            data: {
                labels: ['Passed', 'Failed', 'Skipped'],
                datasets: [{
                    data: [chartData.passed, chartData.failed, chartData.skipped],
                    backgroundColor: ['#37B24D', '#F03E3E', '#FD7E14'],
                    borderColor: '#FFFFFF',
                    borderWidth: 3
                }]
            },
            options: {
                responsive: true,
                maintainAspectRatio: true,
                plugins: {
                    legend: {
                        position: 'bottom',
                        labels: {
                            generateLabels: function(chart) {
                                const data = chart.data;
                                return data.labels.map((label, i) => {
                                    const value = data.datasets[0].data[i];
                                    const percentage = total > 0 ? ((value / total) * 100).toFixed(1) : 0;
                                    return {
                                        text: `${label}: ${value} (${percentage}%)`,
                                        fillStyle: data.datasets[0].backgroundColor[i],
                                        hidden: false,
                                        index: i
                                    };
                                });
                            },
                            padding: 16,
                            font: { size: 13 }
                        }
                    }
                },
                cutout: '65%'
            }
        });

        // Pie Chart
        const pieCtx = document.getElementById('pieChart').getContext('2d');
        new Chart(pieCtx, {
            type: 'pie',
            data: {
                labels: ['Passed', 'Failed', 'Skipped'],
                datasets: [{
                    data: [chartData.passed, chartData.failed, chartData.skipped],
                    backgroundColor: ['#37B24D', '#F03E3E', '#FD7E14']
                }]
            },
            options: {
                responsive: true,
                plugins: {
                    legend: { position: 'bottom' }
                }
            }
        });

        // Bar Chart
        const barCtx = document.getElementById('barChart').getContext('2d');
        new Chart(barCtx, {
            type: 'bar',
            data: {
                labels: ['Passed', 'Failed', 'Skipped'],
                datasets: [{
                    label: 'Test Results',
                    data: [chartData.passed, chartData.failed, chartData.skipped],
                    backgroundColor: ['#37B24D', '#F03E3E', '#FD7E14']
                }]
            },
            options: {
                responsive: true,
                scales: {
                    y: {
                        beginAtZero: true,
                        ticks: { precision: 0 }
                    }
                },
                plugins: {
                    legend: { display: false }
                }
            }
        });
    </script>
</body>
</html>`
}

            margin-bottom: 32px;
        }
        .summary-card {
            background: var(--color-surface);
            border-radius: 12px;
            padding: 24px;
            box-shadow: 0 4px 6px rgba(0,0,0,0.1);
            display: flex;
            align-items: center;
            gap: 16px;
        }
        .summary-card__icon { font-size: 36px; }
        .summary-card__value { font-size: 36px; font-weight: 700; margin-bottom: 4px; }
        .summary-card__label {
            font-size: 14px;
            color: var(--color-text-secondary);
            text-transform: uppercase;
        }
        .summary-card--success .summary-card__value { color: var(--color-success); }
        .summary-card--danger .summary-card__value { color: var(--color-danger); }
        .summary-card--warning .summary-card__value { color: var(--color-warning); }
        .spec-card {
            background: var(--color-surface);
            border-radius: 12px;
            padding: 24px;
            margin-bottom: 16px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
            border-left: 4px solid var(--color-border);
        }
        .spec-card--passed { border-left-color: var(--color-success); }
        .spec-card--failed { border-left-color: var(--color-danger); }
        .spec-card--skipped { border-left-color: var(--color-warning); }
        .spec-card__title { font-size: 20px; font-weight: 600; margin-bottom: 8px; }
        .spec-card__meta {
            display: flex;
            gap: 16px;
            font-size: 14px;
            color: var(--color-text-secondary);
            margin-bottom: 12px;
        }
        .status-badge {
            display: inline-block;
            padding: 4px 12px;
            border-radius: 12px;
            font-size: 12px;
            font-weight: 600;
            text-transform: uppercase;
            margin-bottom: 8px;
        }
        .status-badge--passed { background: #D1FAE5; color: #065F46; }
        .status-badge--failed { background: #FEE2E2; color: #991B1B; }
        .status-badge--skipped { background: #FEF3C7; color: #92400E; }
        .tag {
            display: inline-block;
            background: var(--color-bg);
            color: var(--color-text-secondary);
            padding: 4px 12px;
            border-radius: 6px;
            font-size: 12px;
            margin-right: 8px;
            margin-bottom: 8px;
        }
        .footer {
            background: var(--color-surface);
            border-top: 1px solid var(--color-border);
            padding: 24px 0;
            margin-top: 48px;
            text-align: center;
            color: var(--color-text-secondary);
        }
        .section-title { font-size: 24px; font-weight: 700; margin: 32px 0 24px; }
        .chart-container {
            background: var(--color-surface);
            border-radius: 12px;
            padding: 24px;
            margin-bottom: 32px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
            max-width: 500px;
            margin-left: auto;
            margin-right: auto;
        }
        #resultsChart {
            max-height: 300px;
        }
    </style>
</head>
<body>
    <header class="header">
        <div class="container">
            <h1 class="header__title">🎯 {{.ProjectName}} - Enhanced Test Report</h1>
            <p style="color: var(--color-text-secondary); margin-top: 8px;">
                Environment: {{.Environment}} | Generated: {{.Timestamp}}
            </p>
        </div>
    </header>

    <main class="main">
        <div class="container">
            <div class="summary-grid">
                <div class="summary-card summary-card--success">
                    <div class="summary-card__icon">✅</div>
                    <div>
                        <h3 class="summary-card__value">{{.PassedSpecsCount}}</h3>
                        <p class="summary-card__label">Passed</p>
                    </div>
                </div>
                
                <div class="summary-card summary-card--danger">
                    <div class="summary-card__icon">❌</div>
                    <div>
                        <h3 class="summary-card__value">{{.FailedSpecsCount}}</h3>
                        <p class="summary-card__label">Failed</p>
                    </div>
                </div>
                
                <div class="summary-card summary-card--warning">
                    <div class="summary-card__icon">⏭️</div>
                    <div>
                        <h3 class="summary-card__value">{{.SkippedSpecsCount}}</h3>
                        <p class="summary-card__label">Skipped</p>
                    </div>
                </div>
                
                <div class="summary-card">
                    <div class="summary-card__icon">⏱️</div>
                    <div>
                        <h3 class="summary-card__value">{{.ExecutionTime}}</h3>
                        <p class="summary-card__label">Duration</p>
                    </div>
                </div>
            </div>

            <div class="chart-container">
                <h3 style="margin-bottom: 16px; text-align: center;">Test Results Distribution</h3>
                <canvas id="resultsChart"></canvas>
            </div>

            <h2 class="section-title">Test Specifications ({{.TotalSpecsCount}} total)</h2>
            
            {{range .SpecResults}}
            <div class="spec-card spec-card--{{getStatus .}}">
                <span class="status-badge status-badge--{{getStatus .}}">{{getStatus .}}</span>
                <h3 class="spec-card__title">{{getSpecHeading .}}</h3>
                <div class="spec-card__meta">
                    <span>⏱️ {{formatDuration .GetExecutionTime}}</span>
                    <span>📊 {{getScenarioCount .}} scenarios</span>
                </div>
                {{$tags := getTags .}}
                {{if $tags}}
                <div style="margin-top: 12px;">
                    {{range $tags}}<span class="tag">{{.}}</span>{{end}}
                </div>
                {{end}}
            </div>
            {{end}}
        </div>
    </main>

    <footer class="footer">
        <div class="container">
            <p>Generated by <strong>Enhanced Gauge HTML Report</strong> v5.0.0</p>
            <p style="margin-top: 8px; font-size: 14px;">
                Success Rate: {{.SuccessRate}}% | Total Specifications: {{.TotalSpecsCount}} | Total Scenarios: {{.TotalScenarios}}
            </p>
        </div>
    </footer>

    <script>
        const ctx = document.getElementById('resultsChart').getContext('2d');
        const passedCount = {{.PassedSpecsCount}};
        const failedCount = {{.FailedSpecsCount}};
        const skippedCount = {{.SkippedSpecsCount}};
        const total = passedCount + failedCount + skippedCount;
        
        new Chart(ctx, {
            type: 'doughnut',
            data: {
                labels: ['Passed', 'Failed', 'Skipped'],
                datasets: [{
                    data: [passedCount, failedCount, skippedCount],
                    backgroundColor: ['#10B981', '#EF4444', '#F59E0B'],
                    borderWidth: 2,
                    borderColor: '#FFFFFF',
                    hoverBorderWidth: 3,
                    hoverBorderColor: '#FFFFFF'
                }]
            },
            options: {
                responsive: true,
                maintainAspectRatio: true,
                aspectRatio: 2,
                cutout: '60%',
                animation: {
                    animateRotate: true,
                    animateScale: true,
                    duration: 1000
                },
                plugins: {
                    legend: {
                        position: 'bottom',
                        labels: { 
                            padding: 20, 
                            font: { size: 14 },
                            generateLabels: function(chart) {
                                const data = chart.data;
                                return data.labels.map((label, i) => {
                                    const value = data.datasets[0].data[i];
                                    const percentage = total > 0 ? ((value / total) * 100).toFixed(1) : 0;
                                    return {
                                        text: label + ': ' + value + ' (' + percentage + '%)',
                                        fillStyle: data.datasets[0].backgroundColor[i],
                                        hidden: false,
                                        index: i
                                    };
                                });
                            }
                        }
                    },
                    tooltip: {
                        callbacks: {
                            label: function(context) {
                                const label = context.label || '';
                                const value = context.parsed;
                                const percentage = total > 0 ? ((value / total) * 100).toFixed(1) : 0;
                                return label + ': ' + value + ' (' + percentage + '%)';
                            }
                        }
                    }
                }
            },
            plugins: [{
                id: 'centerText',
                beforeDraw: function(chart) {
                    const width = chart.width;
                    const height = chart.height;
                    const ctx = chart.ctx;
                    ctx.restore();
                    
                    const fontSize = (height / 114).toFixed(2);
                    ctx.font = 'bold ' + fontSize + 'em sans-serif';
                    ctx.textBaseline = 'middle';
                    ctx.fillStyle = '#1F2937';
                    
                    const successRate = total > 0 ? ((passedCount / total) * 100).toFixed(1) : 0;
                    const text = successRate + '%';
                    const textX = Math.round((width - ctx.measureText(text).width) / 2);
                    const textY = height / 2 - 10;
                    
                    ctx.fillText(text, textX, textY);
                    
                    // Draw "Success" label
                    ctx.font = fontSize * 0.4 + 'em sans-serif';
                    ctx.fillStyle = '#6B7280';
                    const labelText = 'Success Rate';
                    const labelX = Math.round((width - ctx.measureText(labelText).width) / 2);
                    const labelY = height / 2 + 20;
                    ctx.fillText(labelText, labelX, labelY);
                    
                    ctx.save();
                }
            }]
        });
    </script>
</body>
</html>`
}
