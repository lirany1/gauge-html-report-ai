# Gauge HTML Report Enhanced - Intelligent Analysis & AI Configuration
# Copy this file to .env and configure your AI provider

# ============================================================================
# OPTION 1: Pattern-Based Intelligent Analysis (Default - No Setup Required)
# ============================================================================
# Leave all variables commented out to use free, offline intelligent analysis.
# This works out-of-the-box with no configuration needed.
# 
# Features:
# - Automatic error classification (8 types)
# - Failure grouping by similarity
# - Health status reporting
# - Template-based fix suggestions
# - Executive summary generation


# ============================================================================
# OPTION 2: AI-Powered Analysis with OpenAI (GPT-4, GPT-3.5)
# ============================================================================
# Best for: Production use, high-quality AI-powered insights
# Cost: ~$0.01-0.03 per report (GPT-4), ~$0.001-0.003 (GPT-3.5)
# Get API key: https://platform.openai.com/api-keys

# GAUGE_AI_ENABLED=true
# GAUGE_AI_PROVIDER=openai
# GAUGE_AI_API_KEY=sk-your-openai-api-key-here
# GAUGE_AI_MODEL=gpt-4-turbo-preview                  # or gpt-3.5-turbo for lower cost
# GAUGE_AI_API_URL=https://api.openai.com/v1/chat/completions


# ============================================================================
# OPTION 3: AI-Powered Analysis with Anthropic Claude (Claude 3)
# ============================================================================
# Best for: Detailed AI-powered analysis, complex failures
# Cost: ~$0.01-0.05 per report depending on model
# Get API key: https://console.anthropic.com/

# GAUGE_AI_ENABLED=true
# GAUGE_AI_PROVIDER=claude
# GAUGE_AI_API_KEY=sk-ant-your-claude-api-key-here
# GAUGE_AI_MODEL=claude-3-sonnet-20240229            # or claude-3-opus-20240229 for best quality
# GAUGE_AI_API_URL=https://api.anthropic.com/v1/messages


# ============================================================================
# OPTION 4: AI-Powered Analysis with Local LLM (Ollama, LM Studio, etc.)
# ============================================================================
# Best for: Privacy-sensitive environments, unlimited usage
# Cost: Free (after model download), runs on your hardware
# Setup: Install Ollama (https://ollama.ai) and run: ollama pull llama2

# GAUGE_AI_ENABLED=true
# GAUGE_AI_PROVIDER=local
# GAUGE_AI_MODEL=llama2                              # or mistral, codellama, etc.
# GAUGE_AI_API_URL=http://localhost:11434/api/generate


# ============================================================================
# Advanced Configuration (Optional)
# ============================================================================

# Custom timeout for AI API calls (in seconds)
# GAUGE_AI_TIMEOUT=30

# Maximum tokens for AI responses
# GAUGE_AI_MAX_TOKENS=500

# Enable verbose logging for AI operations
# GAUGE_AI_VERBOSE=true


# ============================================================================
# Quick Setup Examples
# ============================================================================

# Example 1: OpenAI GPT-4 (Best Quality)
# GAUGE_AI_ENABLED=true
# GAUGE_AI_PROVIDER=openai
# GAUGE_AI_API_KEY=sk-proj-xxxxxxxxxxxxx
# GAUGE_AI_MODEL=gpt-4-turbo-preview

# Example 2: OpenAI GPT-3.5 (Budget-Friendly)
# GAUGE_AI_ENABLED=true
# GAUGE_AI_PROVIDER=openai
# GAUGE_AI_API_KEY=sk-proj-xxxxxxxxxxxxx
# GAUGE_AI_MODEL=gpt-3.5-turbo

# Example 3: Claude 3 Sonnet (Balanced)
# GAUGE_AI_ENABLED=true
# GAUGE_AI_PROVIDER=claude
# GAUGE_AI_API_KEY=sk-ant-xxxxxxxxxxxxx
# GAUGE_AI_MODEL=claude-3-sonnet-20240229

# Example 4: Local Ollama (Free & Private)
# GAUGE_AI_ENABLED=true
# GAUGE_AI_PROVIDER=local
# GAUGE_AI_MODEL=llama2


# ============================================================================
# Usage Instructions
# ============================================================================

# 1. Copy this file:
#    cp .env.example .env

# 2. Uncomment and configure ONE of the options above

# 3. Source the environment variables:
#    source .env
#    # OR add to your shell profile (~/.zshrc or ~/.bashrc)

# 4. Run your tests:
#    gauge run specs/

# 5. Check the HTML report for AI-powered insights!


# ============================================================================
# Privacy & Security Notes
# ============================================================================

# ⚠️ IMPORTANT: Never commit your actual .env file with real API keys!
# The .env file should be in .gitignore

# AI-Powered Analysis (OpenAI/Claude):
# - Error messages and stack traces are sent to the API
# - No source code is sent
# - Data is encrypted in transit
# - Use pattern-based intelligent analysis or local LLM for sensitive projects

# AI-Powered Analysis with Local LLM (Ollama/LM Studio):
# - All data stays on your machine
# - No external API calls
# - Safe for sensitive codebases
# - Requires 8-16GB RAM


# ============================================================================
# Cost Estimates (as of 2024)
# ============================================================================

# Pattern-Based Intelligent Analysis: $0.00 per report
# GPT-3.5-turbo:  ~$0.001-0.003 per report
# GPT-4-turbo:    ~$0.01-0.03 per report
# Claude-3-haiku: ~$0.005-0.01 per report
# Claude-3-sonnet:~$0.01-0.03 per report
# Claude-3-opus:  ~$0.03-0.05 per report
# Local LLM:      $0.00 per report (hardware cost only)

# For 100 reports/month:
# - Pattern-Based Intelligent Analysis: Free
# - GPT-3.5: $0.10-0.30/month
# - GPT-4: $1-3/month
# - Claude Sonnet: $1-3/month
# - Local: Free


# ============================================================================
# Troubleshooting
# ============================================================================

# Not seeing AI-powered insights?
# 1. Verify environment variables are loaded: echo $GAUGE_AI_ENABLED
# 2. Check plugin logs for errors: gauge run specs/ --verbose
# 3. Ensure API key is valid and has credits
# 4. For local LLM, verify server is running: curl http://localhost:11434

# Getting "Invalid API key" errors?
# - Check for typos in GAUGE_AI_API_KEY
# - Ensure no extra spaces or quotes
# - Verify key is active in your provider dashboard

# Local LLM not working?
# - Ensure Ollama is running: ollama serve
# - Pull the model: ollama pull llama2
# - Check port: curl http://localhost:11434/api/version


# ============================================================================
# Support
# ============================================================================

# Documentation: See docs/REAL_AI_SETUP.md
# Examples: See docs/AI_ANALYSIS_EXPLAINED.md
# Issues: Report at GitHub repository
